{
	// Place your Codeforces workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Python Boilerplate": {
		"prefix": "lpy",
		"body": [
			"# Author: JustKitkat",
			"# Status: WIP",
			"",
			"inp=input",
			"inf=float('inf')",
			"",
			"def sin(): return [i for i in inp().split()]",
			"def iin(): return [int(i) for i in inp().split()]",
			"def fin(): return [float(i) for i in inp().split()]",
			"def iinp(): return int(inp())",
			"def finp(): return float(inp())",
			"",
			"def solve(tc):",
			"	$0",
			"",
			"def main():",
			"	tc = 1",
			"	tc = iinp()",
			"	for i in range(tc): # Testcases",
			"		solve(i)",
			"",
			"main()"
		],
		"description": "Load python boilerplate for competitions"
	},
	"C++ Boilerplate": {
		"prefix": "lcp",
		"body": [
"// Author: JustKitkat",
"// Status: WIP",
"",
"#include <bits/stdc++.h>",
"// #include <ext/pb_ds/assoc_container.hpp>",
"// #include <ext/pb_ds/tree_policy.hpp>",
"using namespace std;",
"",
"// #pragma GCC optimize(\"O3,unroll-loops\")",
"// #pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")",
"",
"#define int long long",
"#define el \"\\n\"",
"#define arr array",
"#define ll long long",
"#define ld long double",
"#define ii pair<int, int>",
"#define pll pair<long long, long long>",
"#define vi vector<int>",
"#define vll vector<long long>",
"#define vii vector<ii>",
"#define vllll vector<pll>",
"#define umap unordered_map",
"#define uset unordered_set",
"#define pb push_back",
"#define mp make_pair",
"#define F first",
"#define S second",
"#define all(a) (a).begin(), (a).end()",
"#define FOR(a,b) for(auto i=a;i<b;++i)",
"#define DFOR(a,b) for(auto i=a;i>=b;--i)",
"#define JFOR(a,b) for(auto j=a;j<b;++j)",
"#define DJFOR(a,b) for(auto j=a;j>=b;--j)",
"#define show(x) cerr << #x << \" is \" << x << endl;",
"#define show2(x,y) cerr << #x << \" is \" << x << \" \" << #y << \" is \" << y << endl;",
"#define show3(x,y,z) cerr << #x << \" is \" << x << \" \" << #y << \" is \" << y << \" \" << #z << \" is \" << z << endl;",
"#define show_vec(a) for(auto &x:a)cerr<<x<<' ';cerr<<endl;",
"#define discretize(x) sort(x.begin(), x.end()); x.erase(unique(x.begin(), x.end()), x.end());",
"void dbg_out() { cerr << endl; }",
"template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }",
"#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)",
"string to_upper(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='a' && a[i]<='z') a[i]-='a'-'A'; return a; }",
"string to_lower(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='A' && a[i]<='Z') a[i]+='a'-'A'; return a; }",
"bool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }",
"void yes() { cout<<\"YES\\n\"; }",
"void no() { cout<<\"NO\\n\"; }",
"mt19937_64 rnd(chrono::steady_clock::now().time_since_epoch().count());",
"",
"#define __time__ { auto duration = chrono::duration<double>( /* Show runtime */ \\",
"chrono::high_resolution_clock::now() - BEG); cout<<\"Time: \"<<duration.count()<<endl;}",
"",
"// PBDS -> initialise using `ordered_set s;` -> change to greater<int> for reversed order.",
"// using namespace __gnu_pbds;",
"// #define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>",
"// #define ordered_multiset tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update>",
"",
"const int MAX_N = 1e5 + 5;",
"const ll INF = 1e9;",
"const ll MOD = 1e9+7;",
"const double PI = acos(-1);",
"const auto BEG = std::chrono::high_resolution_clock::now(); //Begining of the program",
"",
"ll n=0, m=0, k=0, q=0;",
"void solve(int tc){",
"    $0",
"    ",
"}",
"",
"signed main(){",
"    ios_base::sync_with_stdio(0);",
"    cin.tie(0); cout.tie(0);",
"",
"	// freopen(\"out\", \"w\", stdout);",
"	// freopen(\"in\", \"r\", stdin);",
"",
"    int tc = 1;",
"    cin >> tc;",
"    for (int t = 1; t <= tc; t++) {",
"        // cout << \"Case #\" << t << \": \";",
"        solve(t);",
"    }",
"",
"	//__time__ //Runtime"
"}",
""
		]
	}
}